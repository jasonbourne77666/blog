name: Deploy Blog # 定义工作流名称，用于在GitHub Actions中显示

# 触发条件配置
on:
  workflow_dispatch: # 手动触发工作流的设置
    inputs:
      environment:
        description: "部署环境" # 参数描述，显示在GitHub UI中
        required: true # 设为必填项，用户必须选择一个值才能触发工作流
        default: "production" # 默认值，如果用户不做选择，将使用此值
        type: choice # 参数类型为选择型，用户从options中选择
        options: # 可选择的选项列表
          - production # 生产环境
          - staging # 预发布环境
          - development # 开发环境

jobs:
  # 部署到服务器
  deploy:
    runs-on: ubuntu-latest # 运行环境
    timeout-minutes: 15 # 部署作业的超时时间
    steps:
      # 步骤1：检出代码（部署作业需要访问仓库代码）
      - name: Checkout code
        uses: actions/checkout@v4
        timeout-minutes: 5

      # 步骤2：复制代码到服务器
      - name: Copy code to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.ALIYUN_ECS_HOST }}
          username: ${{ secrets.ALIYUN_ECS_USERNAME }}
          key: ${{ secrets.ALIYUN_ECS_SSH_KEY }}
          port: 22
          source: "."
          target: "/home/blog"
          rm: true # 删除目标目录中的现有文件
          timeout: 10m

      # 步骤3：通过SSH连接到服务器并执行部署
      - name: Deploy to Aliyun ECS
        uses: appleboy/ssh-action@master # 使用第三方SSH动作连接远程服务器
        with:
          host: ${{ secrets.ALIYUN_ECS_HOST }} # 服务器IP地址，从GitHub Secrets获取
          username: ${{ secrets.ALIYUN_ECS_USERNAME }} # SSH用户名
          key: ${{ secrets.ALIYUN_ECS_SSH_KEY }} # SSH私钥
          port: 22 # SSH端口，默认22
          debug: true # 启用调试模式，在日志中显示更多连接信息
          command_timeout: "15m" # SSH命令执行的超时时间
          # 在远程服务器上执行的Shell脚本
          script: |
            # ==================== 错误处理配置 ====================
            set -e # 遇到任何错误立即退出脚本
            trap 'echo "❌ 部署失败: $?" >&2' ERR # 设置错误处理函数，当脚本出错时显示错误信息

            echo "🚀 开始部署流程..."

            # 进入项目目录
            cd /home/blog


            # ==================== 服务部署 ====================
            echo "🛑 停止旧服务..."
            # 确保在项目目录下执行，停止并删除旧的容器 blog-prod
            cd /home/blog
            # 如果不是第一次部署，则停止并删除旧的容器 blog-prod
            docker compose down blog-prod || true

            echo "📥 拉取最新镜像并启动服务..."
            # 设置镜像版本环境变量，供docker-compose使用
            export IMAGE_TAG=${{ env.IMAGE_VERSION }}
            # 使用docker-compose拉取指定版本镜像并启动服务
            docker compose pull
            docker compose  -f docker-compose.yml --env-file .env up -d

            # ==================== 健康检查 ====================
            echo "⏳ 等待应用启动..."

            # ==================== 清理工作 ====================
            echo "🧹 清理未使用的Docker镜像..."
            # 清理未使用的镜像以节省磁盘空间，|| true 表示清理失败也不影响部署结果
            docker image prune -f || true

            # ==================== 部署完成 ====================
            echo "✅ 部署完成!"
            echo "🔗 应用地址: http://localhost:3010"
            echo "📦 使用镜像版本: ${{ env.IMAGE_VERSION }}"
